{"version":3,"sources":["Pages/ViewVerifyScreen.js"],"names":["CustomButton","lazy","Text","Typography","Option","Select","styles","view","display","flexDirection","alignItems","justifyContent","color","marginTop","title","fontWeight","marginBottom","input","borderRadius","height","ViewVerifyScreen","props","onChange","value","setState","phone","onSearch","val","console","log","sendOtpHandler","e","preventDefault","state","appVerifier","window","recaptchaVerifier","loading","phoneNumber","firebase","auth","signInWithPhoneNumber","then","result","confirmResult","phoneEntered","message","catch","error","onError","verifyResult","otp","confirm","user","uid","Axios","get","pan_no","context","setToken","data","token","localStorage","setItem","history","push","err","disabledPhoneHandler","disabledOtpHandler","isLoggedIn","numbers","recaptcha","React","createRef","useDeviceLanguage","RecaptchaVerifier","this","response","render","widgetId","recaptchaWidgetId","prevProps","email","name","match","params","id","style","ref","showSearch","width","placeholder","optionFilterProp","filterOption","option","children","toLowerCase","indexOf","length","map","item","Password","event","target","iconRender","visible","textAlign","size","disabled","onClick","Component","contextType","AuthContext","memo"],"mappings":"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","file":"static/js/24.d49f2099.chunk.js","sourcesContent":["import React, { Component, memo, lazy, Suspense } from 'react';\r\nimport firebase from 'firebase';\r\nimport Axios from 'axios';\r\nimport { Input, Typography, PageHeader, Spin, Select, message } from 'antd';\r\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\r\nimport { AuthContext } from '../Context/AuthContext';\r\n\r\nconst CustomButton = lazy(() => import('../Components/Button'));\r\n\r\nconst { Text } = Typography;\r\nconst { Option } = Select;\r\n\r\nconst styles = {\r\n    view: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        color: 'white',\r\n        marginTop: 20\r\n    },\r\n    title: {\r\n        fontWeight: \"bold\",\r\n        marginBottom: 2\r\n    },\r\n    input: {\r\n        borderRadius: 3,\r\n        height: 40,\r\n        marginBottom: 20\r\n    },\r\n}\r\n\r\n\r\nclass ViewVerifyScreen extends Component {\r\n    static contextType = AuthContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            phoneEntered: false,\r\n            phone: \"\",\r\n            otp: \"\",\r\n            confirmResult: null,\r\n            user: null,\r\n            uid: null,\r\n            loading: false,\r\n            error: false,\r\n            message: \"\",\r\n            isLoggedIn: false,\r\n            numbers: []\r\n        }\r\n        this.recaptcha = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        // const {  phone } = this.props.location.state;\r\n        firebase.auth().useDeviceLanguage();\r\n        window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(this.recaptcha, {\r\n            'size': 'invisible',\r\n            'callback': function (response) {\r\n                // reCAPTCHA solved, allow signInWithPhoneNumber.\r\n                // ...\r\n            },\r\n            'expired-callback': function () {\r\n                // Response expired. Ask user to solve reCAPTCHA again.\r\n                // ...\r\n            }\r\n        });\r\n        window.recaptchaVerifier.render().then(function (widgetId) {\r\n            window.recaptchaWidgetId = widgetId;\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.numbers !== this.props.numbers) {\r\n            this.setState({ numbers: this.props.numbers });\r\n        }\r\n    }\r\n\r\n    onChange = (value) => {\r\n        this.setState({ phone: value });\r\n    }\r\n\r\n    onSearch = (val) => {\r\n        console.log('search:', val);\r\n    }\r\n\r\n    sendOtpHandler = (e) => {\r\n        e.preventDefault();\r\n        const { phone } = this.state;\r\n        let appVerifier = window.recaptchaVerifier;\r\n        this.setState({ loading: true });\r\n        const phoneNumber = phone;\r\n        firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier)\r\n            .then((result) => {\r\n                console.log(result);\r\n                this.setState({\r\n                    confirmResult: result,\r\n                    phoneEntered: true,\r\n                    message: \"OTP is sent on your mobile number.\"\r\n                });\r\n                this.setState({ loading: false });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                this.setState({ loading: false, message: \"Something went wrong\" });\r\n            });\r\n    }\r\n\r\n    onError = () => {\r\n        message.error(\"Please enter a valid PAN\");\r\n    }\r\n\r\n    verifyResult = () => {\r\n        const { otp, confirmResult, phone } = this.state;\r\n        confirmResult.confirm(otp).then((result) => {\r\n            this.setState({ user: result.user, uid: result.user.uid, loading: true, error: false });\r\n            Axios.get(`/vendors/phone-confirmation/${this.props.pan_no}`)\r\n                .then(result => {\r\n                    this.context.setToken(result.data.token);\r\n                    localStorage.setItem(\"userToken\", result.data.token);\r\n                    this.props.history.push(`/gst-listing/${this.props.pan_no}`);\r\n                })\r\n                .catch((err) => {\r\n                    this.onError();\r\n                })\r\n        }).catch(err => {\r\n            console.log(err)\r\n            // this.setState({ loading: false, error: true, message: \"Invalid OTP!\" });\r\n        })\r\n    }\r\n\r\n    disabledPhoneHandler = () => {\r\n        return this.state.phone;\r\n    }\r\n\r\n    disabledOtpHandler = () => {\r\n        return this.state.otp;\r\n    }\r\n\r\n    render() {\r\n        const { phone, email, name, phoneEntered, loading, error, message, isLoggedIn } = this.state;\r\n\r\n        if (isLoggedIn) {\r\n            this.props.history.push(`/account-detail-form/${this.props.match.params.id}`);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div style={styles.view}>\r\n                    <div ref={(ref) => this.recaptcha = ref}></div>\r\n\r\n                    <Text style={styles.title}>Phone Number</Text>\r\n                    <Select\r\n                        showSearch\r\n                        style={{ width: \"100%\", marginTop: 15, marginBottom: 15 }}\r\n                        placeholder=\"Select your Phone Number\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={this.onChange}\r\n                        onSearch={this.onSearch}\r\n                        filterOption={(input, option) =>\r\n                            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                    >\r\n                        {this.props.numbers.length > 0 && this.props.numbers.map(item => {\r\n                            return <Option value={item.value}>{item.data}</Option>;\r\n                        })}\r\n                    </Select>\r\n                    {phoneEntered &&\r\n                        <>\r\n                            <Text style={styles.title}>OTP</Text>\r\n                            <Input.Password\r\n                                style={styles.input}\r\n                                onChange={event => this.setState({ otp: event.target.value })}\r\n                                placeholder=\"Enter 6 digit OTP\"\r\n                                iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\r\n                            />\r\n                        </>\r\n                    }\r\n\r\n                    {loading ?\r\n                        <div style={{ textAlign: \"center\" }}>\r\n                            <Spin size=\"large\" />\r\n                        </div> : phoneEntered ?\r\n                            <Suspense>\r\n                                <CustomButton disabled={!this.disabledOtpHandler()} title=\"Verify OTP\" onClick={this.verifyResult} />\r\n                            </Suspense> :\r\n                            <Suspense>\r\n                                <CustomButton disabled={!this.disabledPhoneHandler()} title=\"Request OTP\" onClick={this.sendOtpHandler} />\r\n                            </Suspense>\r\n                    }\r\n                    {error && <h5 style={{ color: \"#d9534f\", textAlign: \"center\" }}>{message}</h5>}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default memo(ViewVerifyScreen);"],"sourceRoot":""}