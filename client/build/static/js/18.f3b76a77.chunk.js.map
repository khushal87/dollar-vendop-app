{"version":3,"sources":["Components/Prompt.js","Pages/RequestPanInfo.js"],"names":["memo","props","title","yesTitle","handleClose","visible","handleYes","handleNo","modalTextMain","useState","confirmLoading","setConfirmLoading","setModalText","useEffect","onOk","setTimeout","onCancel","TextInput","lazy","CustomButton","Text","Typography","name","setName","email","setEmail","phone","setPhone","pan_no","setPanNo","setVisible","messageText","setMessageText","noPanId","setNoPanId","exists","setExists","loader","setLoader","mainLoading","setMainLoading","Axios","get","match","params","id","then","result","data","catch","err","styles","view","display","flexDirection","alignItems","justifyContent","color","minHeight","disclaimer","textAlign","marginBottom","width","head","fontSize","className","onBack","history","goBack","style","marginTop","size","marginLeft","marginRight","href","value","onChange","text","autoFocus","placeholder","toUpperCase","disabled","length","onClick","res","post","status","_id","message","error","content","console","log","push"],"mappings":"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","file":"static/js/18.f3b76a77.chunk.js","sourcesContent":["import React, { useState, useEffect, memo } from 'react';\r\nimport { Modal } from 'antd';\r\n\r\nfunction Prompt(props) {\r\n    const { title, yesTitle, handleClose, visible, handleYes, handleNo, modalTextMain } = props;\r\n    const [confirmLoading, setConfirmLoading] = useState(false);\r\n    const [modalText, setModalText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setModalText(modalTextMain)\r\n    }, [modalTextMain])\r\n\r\n    const handlerYes = () => {\r\n        setConfirmLoading(true);\r\n        setModalText(yesTitle);\r\n        handleYes();\r\n        setTimeout(() => {\r\n            setConfirmLoading(false);\r\n            handleClose();\r\n        }, 2000);\r\n    };\r\n\r\n    const handlerNo = () => {\r\n        handleNo();\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title={title}\r\n                visible={visible}\r\n                onOk={handlerYes}\r\n                confirmLoading={confirmLoading}\r\n                onCancel={handlerNo}\r\n            >\r\n                <p>{modalTextMain}</p>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default memo(Prompt);","import React, { useState, memo, useEffect, lazy, Suspense } from 'react';\r\n\r\nimport {\r\n    Typography,\r\n    message,\r\n    Spin,\r\n    PageHeader\r\n} from 'antd';\r\nimport Axios from 'axios';\r\nimport Prompt from '../Components/Prompt';\r\n\r\nconst TextInput = lazy(() => import('../Components/TextInput'));\r\nconst CustomButton = lazy(() => import('../Components/Button'));\r\n\r\nconst { Text } = Typography;\r\n\r\n\r\nconst RequestPanInfo = (props) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [phone, setPhone] = useState(\"\");\r\n    const [pan_no, setPanNo] = useState(\"\");\r\n    const [visible, setVisible] = useState(false);\r\n    const [messageText, setMessageText] = useState(\"\");\r\n    const [noPanId, setNoPanId] = useState(\"\");\r\n    const [exists, setExists] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const [mainLoading, setMainLoading] = useState(false);\r\n\r\n    const onError = () => {\r\n        message.error({\r\n            content: 'Your PAN is already registed with us. Please reconfirm KYC.',\r\n            className: 'custom-class',\r\n            style: {\r\n                marginTop: '40vh',\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setMainLoading(true);\r\n        Axios.get(`/nopandata/check-new-pan-or-not/${props.match.params.id}`)\r\n            .then((result) => {\r\n                setExists(result.data.data);\r\n                setMainLoading(false);\r\n            }).catch(err => {\r\n                setMainLoading(false);\r\n            })\r\n    }, [])\r\n\r\n    const onSubmitHandler = () => {\r\n        setLoader(true);\r\n        const params = {\r\n            name, email, phone, pan_no\r\n        }\r\n        Axios.get(`/vendors/get-vendors-by-pan/${pan_no}`)\r\n            .then((res) => {\r\n                if (res.data.length === 0) {\r\n                    Axios.post(`/nopandata/create-vendors-with-no-pan`, params)\r\n                        .then((result) => {\r\n                            if (result.status === 200) {\r\n                                setVisible(true);\r\n                                setNoPanId(result.data.data._id);\r\n                                setMessageText(\"Our representative will contact you soon. Please note the Id mentioned above\");\r\n                                setLoader(false);\r\n                            }\r\n                        }).catch((err) => {\r\n                            setLoader(false);\r\n                        });\r\n                }\r\n                else {\r\n                    onError();\r\n                    setLoader(false);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setVisible(false);\r\n    }\r\n\r\n    const handleYes = () => {\r\n        return props.history.push('/');\r\n    }\r\n\r\n    const disabledHandler = () => {\r\n        return pan_no && name.length && email && phone.length;\r\n    }\r\n\r\n    const handleNo = () => {\r\n        setVisible(false);\r\n    }\r\n\r\n    const styles = {\r\n        view: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            color: 'white',\r\n            minHeight: '90vh'\r\n        },\r\n        disclaimer: {\r\n            textAlign: \"center\",\r\n            marginBottom: 20,\r\n            width: \"80%\"\r\n        },\r\n        head: {\r\n            fontSize: 15,\r\n            // fontWeight: \"bold\",\r\n            marginBottom: 10,\r\n            color: \"#1890ff\"\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <PageHeader\r\n                className=\"site-page-header\"\r\n                onBack={() => { props.history.goBack() }}\r\n                title=\"Unregistered Vendor\"\r\n            />\r\n            {mainLoading ? <div style={{ marginTop: 20, textAlign: \"center\" }}>\r\n                <Spin size={20} />\r\n            </div> :\r\n                <div style={styles.view}>\r\n                    {!exists ?\r\n                        <>\r\n                            <Text style={styles.disclaimer}>\r\n                                Your PAN is not found registered with Dollar Industries Ltd., please send an email at<br />\r\n                                <a href=\"mailto:dollarphoneverify@gmail.com\">\r\n                                    dollarphoneverify@gmail.com\r\n                </a><br />\r\n                with your id after submitting the details required below.\r\n            </Text>\r\n\r\n                            <Text style={styles.head}>\r\n                                Fill the details below.\r\n                    </Text>\r\n                            <Suspense>\r\n                                <TextInput\r\n                                    title=\"Organization Name*\"\r\n                                    value={name}\r\n                                    onChange={(text) => { setName(text) }}\r\n                                    autoFocus={true}\r\n                                    placeholder=\"Enter your Name\" />\r\n                            </Suspense>\r\n                            <Suspense>\r\n                                <TextInput\r\n                                    title=\"PAN Number*\"\r\n                                    value={pan_no}\r\n                                    onChange={(text) => { setPanNo(text.toUpperCase()) }}\r\n                                    placeholder=\"Enter 10 digit PAN Number\" />\r\n                            </Suspense>\r\n                            <Suspense>\r\n                                <TextInput\r\n                                    title=\"Mobile*\"\r\n                                    value={phone}\r\n                                    onChange={(text) => { setPhone(text) }}\r\n                                    placeholder=\"Enter 10 digit Mobile Number\" />\r\n                            </Suspense>\r\n                            <Suspense>\r\n                                <TextInput\r\n                                    title=\"Email*\"\r\n                                    value={email}\r\n                                    onChange={(text) => { setEmail(text) }}\r\n                                    placeholder=\"Enter your Email\" />\r\n                            </Suspense>\r\n                            <Suspense>\r\n                                <CustomButton\r\n                                    disabled={!disabledHandler()}\r\n                                    title={\"Submit\"}\r\n                                    onClick={onSubmitHandler} />\r\n                            </Suspense>\r\n                            {loader &&\r\n                                <div style={{ textAlign: \"center\" }}>\r\n                                    <Spin size=\"large\" />\r\n                                </div>}\r\n                            {/* <Text type=\"danger\">*We will contact you in 2 weeks</Text> */}\r\n                            <Prompt\r\n                                title={`Id - ${noPanId}`}\r\n                                modalTextMain={messageText}\r\n                                visible={visible}\r\n                                yesTitle=\"Please wait while we check..\"\r\n                                handleClose={handleClose}\r\n                                handleYes={handleYes}\r\n                                handleNo={handleNo}\r\n                            />\r\n                        </> : <Text style={{ textAlign: \"center\", marginLeft: 20, marginRight: 20 }}>\r\n                            Thank You! Your form is already submitted. If you have provided correct email address and phone number you will be contacted soon.\r\n                            </Text>}\r\n                </div>}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default memo(RequestPanInfo);"],"sourceRoot":""}