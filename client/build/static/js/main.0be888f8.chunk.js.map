{"version":3,"sources":["App.js","serviceWorker.js","firebase.js","index.js","Context/vendorContext.js","Utils/sitedimension.js","Context/AuthContext.js","config.js"],"names":["Homepage","lazy","RequestPanInfo","GstListScreen","PhoneVerification","OrganisationDetails","AccountDetailsPage","AttachmentPage","SummaryForm","DownloadData","App","useState","vendorData","setVendorData","latitudeData","setLatitude","longitudeData","setLongitude","tokens","localStorage","getItem","JSON","parse","token","setToken","width","Dimensions","useWindowDimensions","usePosition","latitude","longitude","error","timestamp","accuracy","useEffect","alert","message","AuthContext","Provider","value","data","setItem","stringify","className","fallback","size","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","axios","defaults","baseURL","apiUrl","interceptors","request","use","Promise","reject","response","MainApp","firebase","initializeApp","Component","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","VendorContext","createContext","useVendorContext","useContext","getWindowDimensions","innerWidth","height","innerHeight","windowDimensions","setWindowDimensions","handleResize","removeEventListener","exports"],"mappings":"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","file":"static/js/main.0be888f8.chunk.js","sourcesContent":["import React, { useEffect, useState, Suspense, lazy } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\nimport { message, Spin } from 'antd';\nimport './App.css';\nimport { VendorContext } from './Context/vendorContext';\nimport { Dimensions } from './Utils/sitedimension';\nimport { AuthContext } from './Context/AuthContext';\nimport { usePosition } from 'use-position';\n\n//Pages\nconst Homepage = lazy(() => import('./Pages/Homepage'));\nconst RequestPanInfo = lazy(() => import('./Pages/RequestPanInfo'));\nconst GstListScreen = lazy(() => import('./Pages/GstListScreen'));\nconst PhoneVerification = lazy(() => import('./Pages/PhoneVerification'));\nconst OrganisationDetails = lazy(() => import('./Pages/OrganisationDetails'));\nconst AccountDetailsPage = lazy(() => import('./Pages/AccountDetailsPage'));\nconst AttachmentPage = lazy(() => import('./Pages/AttachmentPage'));\nconst SummaryForm = lazy(() => import('./Pages/SummaryForm'));\nconst DownloadData = lazy(() => import('./Pages/DownloadData'));\n\nfunction App() {\n  const [vendorData, setVendorData] = useState(null);\n  const [latitudeData, setLatitude] = useState(null);\n  const [longitudeData, setLongitude] = useState(null);\n  let tokens = localStorage.getItem(\"userToken\");\n  tokens = tokens === \"null\" ? JSON.parse(tokens) : tokens;\n  const [token, setToken] = useState(tokens);\n  const { width } = Dimensions.useWindowDimensions();\n  const watch = true;\n  const { latitude, longitude, timestamp, accuracy, error } = usePosition(watch);\n\n\n  const onError = (error) => {\n    alert(\"Please allow your location to continue\");\n    message.error(\"Please allow your location to continue\");\n  }\n\n  useEffect(() => {\n    setLatitude(latitude);\n    setLongitude(longitude);\n  }, [latitude, longitude]);\n\n  const setTokens = (data) => {\n    localStorage.setItem(\"userToken\", JSON.stringify(data));\n    setToken(data)\n  }\n\n  if (error) {\n    onError();\n  }\n\n  return (\n    <AuthContext.Provider value={{ token: token, setToken: setTokens }}>\n      {width > 800 ?\n        <div className=\"App-desktop\">\n          <BrowserRouter>\n            <Suspense fallback={\n              <div className=\"App-header\">\n                <Spin size=\"large\" />\n              </div>\n            }>\n              <Switch>\n                <VendorContext.Provider value={{\n                  vendorData, setVendorData,\n                  latitude: latitude,\n                  longitude: longitude,\n                  setLatitude, setLongitude\n                }}>\n                  <Route exact path=\"/\" component={Homepage} />\n                  <Route exact path=\"/phone-verify/:id\" component={PhoneVerification} />\n                  <Route exact path=\"/request-pan-info/:id\" component={RequestPanInfo} />\n                  <Route exact path=\"/gst-listing/:id\" component={GstListScreen} />\n                  <Route exact path=\"/organization-detail-form/:id\" component={OrganisationDetails} />\n                  <Route exact path=\"/account-detail-form/:id\" component={AccountDetailsPage} />\n                  <Route exact path=\"/attachement-details/:id\" component={AttachmentPage} />\n                  <Route exact path=\"/summary-form/:id\" component={SummaryForm} />\n                  <Route exact path=\"/shdh3939wsd29\" component={DownloadData} />\n                </VendorContext.Provider>\n              </Switch>\n            </Suspense>\n          </BrowserRouter>\n        </div> :\n        <div className=\"App\">\n          <BrowserRouter>\n            <Suspense fallback={\n              <div className=\"App-header\">\n                <Spin size=\"large\" />\n              </div>\n            }>\n              <Switch>\n                <VendorContext.Provider value={{\n                  vendorData, setVendorData,\n                  latitude: latitudeData,\n                  longitude: longitudeData,\n                  setLatitude, setLongitude\n                }}>\n                  <Route exact path=\"/\" component={Homepage} />\n                  <Route exact path=\"/phone-verify/:id\" component={PhoneVerification} />\n                  <Route exact path=\"/request-pan-info/:id\" component={RequestPanInfo} />\n                  <Route exact path=\"/gst-listing/:id\" component={GstListScreen} />\n                  <Route exact path=\"/organization-detail-form/:id\" component={OrganisationDetails} />\n                  <Route exact path=\"/account-detail-form/:id\" component={AccountDetailsPage} />\n                  <Route exact path=\"/attachement-details/:id\" component={AttachmentPage} />\n                  <Route exact path=\"/summary-form/:id\" component={SummaryForm} />\n                </VendorContext.Provider>\n              </Switch>\n            </Suspense>\n          </BrowserRouter>\n        </div>}\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const firebaseConfig = {\r\n    apiKey: \"AIzaSyAck0KGmFjlZq1Ur1h7aucGLDuqi8uhYNo\",\r\n    authDomain: \"dollar-app-d2044.firebaseapp.com\",\r\n    databaseURL: \"https://dollar-app-d2044.firebaseio.com\",\r\n    projectId: \"dollar-app-d2044\",\r\n    storageBucket: \"dollar-app-d2044.appspot.com\",\r\n    messagingSenderId: \"427883286231\",\r\n    appId: \"1:427883286231:web:9d771bfb12ec4180c76a92\",\r\n    measurementId: \"G-3R8FJKQ7F6\"\r\n};\r\n\r\nexport default firebaseConfig;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"antd/dist/antd.css\";\nimport axios from 'axios';\nimport { apiUrl } from './config';\nimport firebaseConfig from './firebase';\nimport firebase from 'firebase';\n\naxios.defaults.baseURL = apiUrl;\n\naxios.interceptors.request.use(request => {\n  // Edit request config\n  return request;\n}, error => {\n  return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n  // Edit response config\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\nclass MainApp extends Component {\n  componentWillMount() {\n    firebase.initializeApp(firebaseConfig);\n  }\n  render() {\n    return (\n      <App />\n    )\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import { createContext, useContext } from 'react';\r\n\r\n//Auth Context\r\nexport const VendorContext = createContext({\r\n    vendorData: null,\r\n    setVendorData: (data) => { },\r\n    latitude: null,\r\n    setLatitude: (data) => { },\r\n    longitude: null,\r\n    setLongitude: (data) => { }\r\n});\r\n\r\n//Use Auth Context\r\nexport function useVendorContext() {\r\n    return useContext(VendorContext);\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nfunction useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n  return windowDimensions;\r\n}\r\n\r\n\r\nexport const Dimensions = {\r\n  useWindowDimensions\r\n};\r\n","import { createContext, useContext } from 'react';\r\n\r\n//Auth Context\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    setToken: (data) => { }\r\n});\r\n\r\n//Use Auth Context\r\nexport function useAuthContext() {\r\n    return useContext(AuthContext);\r\n}\r\n","exports.apiUrl = \"https://api.dollarvendorapp.com\";"],"sourceRoot":""}